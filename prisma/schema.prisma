generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://mattb:mattb-db-user192837465@10.0.0.151/robins-plants"
}

model auth_user {
  id            String  @id @db.Uuid
  username      String  @unique(map: "auth_user_unique") @db.VarChar
  password_hash String? @db.VarChar
  email         String? @unique(map: "auth_user_unique_email") @db.VarChar
  likes         likes[]

  sessions user_session[]
}

model comments {
  comment_id  String    @id(map: "comments_pk") @db.Uuid
  body        String?   @db.VarChar
  total_likes Int?      @default(0)
  user_id     String?   @db.Uuid
  post_id     String?   @db.Uuid
  create_date DateTime? @default(now()) @db.Timestamptz(6)
  been_edited Boolean?  @default(false)
  posts       posts?    @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "comments_posts_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model likes {
  parent_id String    @db.Uuid
  user_id   String    @db.Uuid
  like_id   String    @id(map: "likes_pk") @db.Uuid
  auth_user auth_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "likes_auth_user_fk")
  posts     posts     @relation(fields: [parent_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "likes_posts_fk")
}

model password_change_requests {
  id          String    @unique(map: "password_change_requests_unique") @db.VarChar
  user_id     String?   @db.Uuid
  create_date DateTime? @default(now()) @db.Timestamptz(6)
}

model posts {
  post_id     String     @id(map: "posts_pk") @db.Uuid
  title       String?    @db.VarChar
  body        String?    @db.VarChar
  image_ref   String?    @db.VarChar
  create_date DateTime   @default(now()) @db.Timestamptz(6)
  total_likes Int?       @default(0)
  user_id     String?    @db.Uuid
  comments    comments[]
  likes       likes[]
}

model user_session {
  id         String   @id
  expires_at DateTime 
  user_id    String   @db.Uuid

  auth_user auth_user @relation(references: [id], fields: [user_id], onDelete: Cascade)
}
